#include<bits/stdc++.h>
using namespace std;
struct Node
{
    int key;
    Node *left, *right;

    Node(int key)
    {
        this->key = key;
        this->left = this->right = nullptr;
    }
};

// Function to check if given Binary Tree is Complete or not
bool isComplete(Node* root)
{
    if (root == NULL)
        return false;
    queue<Node*> q;
    q.push(root);
    bool isInternalLevel = false;
    while(q.size())
    {
        Node* node = q.front();
        q.pop();
        if(isInternalLevel && (node->left || node->right))
            return false;
        if(node->left == NULL && node->right != NULL){
            return false;
        }
        if(node->left){
            q.push(node->left);
        }
        else{
            isInternalLevel = true;
        }
        if(node->right){
            q.push(node->right);
        }
        else{
            isInternalLevel = true;
        }
    }
    return true;
}

int main()
{
    Node* root = NULL;
    
    root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    //root->right->left = new Node(6);
    //root->right->right = new Node(7);
    root->left->left->left = new Node(8);
    root->left->left->right = new Node(9);
    //root->left->right->right = new Node(10);

    if (isComplete(root))
        cout << "Given binary tree is a Complete Binary Tree";
    else
        cout << "Given binary tree is not a Complete Binary Tree";

    return 0;
}
