                                        // --- Bottom View of Binary Tree --- //
#include<bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    int hd;
    struct Node *left;
    struct Node *right;
};

struct Node* createNode(int val){
    struct Node *newNode = new Node();
    newNode->data = val;
    newNode->hd = INT_MAX;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
};
 void BottomView(struct Node *root){
     if(root == NULL)
        return;
     int hd = 0;
     queue<Node*>q;
     map<int, int> m;
     root->hd = 0;
     q.push(root);
     while (!q.empty())
    {
        Node *temp = q.front();
        q.pop();
        hd = temp->hd;
        m[hd] = temp->data;
        if (temp->left != NULL)
        {
            temp->left->hd = hd-1;
            q.push(temp->left);
        }
        if (temp->right != NULL)
        {
            temp->right->hd = hd+1;
            q.push(temp->right);
        }
    }
    map<int , int>::iterator it;
    for (it = m.begin(); it != m.end(); ++it)
        cout << it->second << " ";
}
int main(){
    struct Node *root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(7);
    root->left->right = createNode(5);
    root->right->left = createNode(-1);
    root->right->right = createNode(78);
    BottomView(root);
    return 0;
}

