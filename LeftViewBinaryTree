                                        /* Left view of binary tree*/

#include <bits/stdc++.h>
using namespace std;
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};

void leftView(Node *root)
{
   // Your code here
   if(root==NULL)
    return;
   queue<Node*> q;
   q.push(root);
   while(q.empty()==false){
       int i=0;
       int size_q=q.size();
       while(i++<size_q){
           Node* first_elem_of_q=q.front();
           q.pop();
           if(i==1)
            cout<<first_elem_of_q->data<<" ";
            
           if(first_elem_of_q->left){
               q.push(first_elem_of_q->left);
           }
           
           if(first_elem_of_q->right){
               q.push(first_elem_of_q->right);
           }
       }
   }
}

int main()
{
  int t;
  struct Node *child;
  scanf("%d", &t);
  while (t--)
  {
     map<int, Node*> m;
     int n;
     scanf("%d",&n);
     struct Node *root = NULL;
     while (n--)
     {
        Node *parent;
        char lr;
        int n1, n2;
        scanf("%d %d %c", &n1, &n2, &lr);
        if (m.find(n1) == m.end())
        {
           parent = new Node(n1);
           m[n1] = parent;
           if (root == NULL)
             root = parent;
        }
        else
           parent = m[n1];
        child = new Node(n2);
        if (lr == 'L')
          parent->left = child;
        else
          parent->right = child;
        m[n2]  = child;
     }
     leftView(root);
     cout << endl;
  }
  return 0;
}
